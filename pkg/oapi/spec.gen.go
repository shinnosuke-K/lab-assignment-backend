// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXXW8bRRT9K9aFx03XblLUbtUHPkJqGkgklwdUITTevbbHXs8sM7NpgmWJOIqEBFUR",
	"Cl8CQgUlEpUcNSA+JCT6Y7Yb03+BZtbetb02JCpBQeIl8mbvHJ97zp0z4w64vB1whkxJcDoQEEHaqFCY",
	"pwqqhRc5b1HUTx5KV9BAUc7AgeZtFW0fHu/sxveOot5H8e53Ue+DqPc+WED1+wYSDwVYwEgbwRnHskC6",
	"DWwTDYqbpB34uuCVynKlUl57rfzSNVJ1PSxdXFy6dLWwTlTjmn21cF2pYI35W2CB2gr0AqkEZXXodi0I",
	"JYqylycZ9w8GR3cGHz+I7/4yIhYQ1choDVdaIPDtkAr0wFEixNkUS4ul50pXiqWLSzNYdDWGDDiTaMRb",
	"u6H/upwpZEp/JEHgU5doanZTan6d7FvM+knyldB1UUqwhlqeypI5Itda0ltYWmzWsO43USx4fks2a36L",
	"SDarJU0qgTFfXhfEC4nCMUwJzq03LVBUGfy0IgWrcu4jYdC1wCdVmV8aCB6gUDRRLbGlM03FlNVQSp7I",
	"8KzAGjjwjJ2Nrz0kaqeVZjRGzHxSzUjxahNdNQE7RWzEBAZ7Dx//2gcLAk61j3ClCN1T0E5WpW8oU1jH",
	"SWoZhxkE9YDmrY52+lHvYdS7H+38mBo+QT8gUt7mwjMTP/yYoL1FvclZzreTLR4fnjGcXJ8p8In3S9a/",
	"aTHXuq6grMZHu4i4WsfcLhnc2xt8/3N8eP/J7p34aP+PB4+Ov/7t+fUyWOBTF5k0vlAPmaI1qrWEV8s3",
	"swDQD7kx2UAhE/jShaJ+zQNkJKDgwOIF/S/LxIjRyh7NvN1JwqRr1+jmdJjemj2zWYk9TCJjBlFuI2/6",
	"k3d/iPsHaeQ+fnR43P822v48SV3tnwkXHYSwzqVaGRJ7mW4awqdhM5YzmpFOR5TqBe5tnSbV/nKfplnR",
	"zYfnxWJx3vK0zl67oa1ZKpbyUr3OSKgaXNB30NNFlxK8yaIyUygY8QsVFBsoCstCDENDhu02EVvTmm8f",
	"Jpqbmhm+S7KBT2c8l+oEvn8V9z87ge8VTed/4/8h47XoifENnoR9HWeYFX+xP+jvZfeiu5/Ev386x6wV",
	"VNc11tnIbI7bvMQTXb7BQ1FYWb5ZQOYlR5Xp0CfVs08zk9cnT7NVUj2nQTZH6PMzy+kZmZyOg58+PN7/",
	"cirNJiw/qyCbtvxvgmyVVM9rhv2HPc+CzOd1anqebdf4JXOOS6sG4WwkNtfC8yzxuD6poDxUc8+G0YJv",
	"ot5BtPPefE01yFMPfV6ySTb/pkTDjpNbvTT1SVOh8MGBhlKBY+tNtVAlbguZ51wuXtY/tLp/BgAA//8k",
	"tx9sohAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
